{"ast":null,"code":"import _objectSpread from \"/Users/chentianming/Desktop/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return _objectSpread({}, state, {\n        contacts: action.payload,\n        loading: false\n      });\n\n    case ADD_CONTACT:\n      return _objectSpread({}, state, {\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      });\n\n    case UPDATE_CONTACT:\n      return _objectSpread({}, state, {\n        // id是contacts从contactContext里实时得到的，再传递给ContactItem，它再set到current里.\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      });\n\n    case DELETE_CONTACT:\n      if (state.filtered === null) {\n        return _objectSpread({}, state, {\n          contacts: state.contacts.filter( // 返回满足条件的对象\n          contact => contact.id !== action.payload),\n          loading: false\n        });\n      } else {\n        return _objectSpread({}, state, {\n          filtered: state.filtered.filter(contact => contact.id !== action.payload),\n          contacts: state.contacts.filter(contact => contact.id !== action.payload),\n          loading: false\n        });\n      }\n\n    // return {\n    //   ...state,\n    //   contacts: state.contacts.filter(\n    //     // 返回满足条件的对象\n    //     contact => contact.id !== action.payload\n    //   ),\n    //   filtered: state.filtered.filter(\n    //     contact => contact.id !== action.payload\n    //   )\n    // };\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload,\n        loading: false\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null,\n        loading: false\n      });\n\n    case FILTER_CONTACTS:\n      return _objectSpread({}, state, {\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(\"\".concat(action.payload), 'gi'); //gloabl, insensitive\n\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n        loading: false\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread({}, state, {\n        filtered: null,\n        loading: false\n      });\n\n    case CONTACT_ERROR:\n      return _objectSpread({}, state, {\n        error: action.payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/chentianming/Desktop/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","state","action","type","contacts","payload","loading","map","contact","id","filtered","filter","current","regex","RegExp","name","match","email","error"],"mappings":";AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,YARF,EASEC,aATF,QAUO,UAVP;AAYA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AACE,+BACKS,KADL;AAEEG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFnB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKb,WAAL;AACE,+BACKQ,KADL;AAEEG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFZ;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,cAAL;AACE,+BACKI,KADL;AAEE;AACAG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAAP,CAAeI,EAA9B,GAAmCP,MAAM,CAACG,OAA1C,GAAoDG,OAD5C,CAHZ;AAMEF,QAAAA,OAAO,EAAE;AANX;;AAQF,SAAKZ,cAAL;AACE,UAAIO,KAAK,CAACS,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,iCACKT,KADL;AAEEG,UAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,MAAf,EACR;AACAH,UAAAA,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAFzB,CAFZ;AAMEC,UAAAA,OAAO,EAAE;AANX;AAQD,OATD,MASO;AACL,iCACKL,KADL;AAEES,UAAAA,QAAQ,EAAET,KAAK,CAACS,QAAN,CAAeC,MAAf,CACRH,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OADzB,CAFZ;AAKED,UAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,MAAf,CACRH,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OADzB,CALZ;AAQEC,UAAAA,OAAO,EAAE;AARX;AAUD;;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKX,WAAL;AACE,+BACKM,KADL;AAEEW,QAAAA,OAAO,EAAEV,MAAM,CAACG,OAFlB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,aAAL;AACE,+BACKK,KADL;AAEEW,QAAAA,OAAO,EAAE,IAFX;AAGEN,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKR,eAAL;AACE,+BACKG,KADL;AAEES,QAAAA,QAAQ,EAAET,KAAK,CAACG,QAAN,CAAeO,MAAf,CAAsBH,OAAO,IAAI;AACzC,gBAAMK,KAAK,GAAG,IAAIC,MAAJ,WAAcZ,MAAM,CAACG,OAArB,GAAgC,IAAhC,CAAd,CADyC,CACY;;AACrD,iBAAOG,OAAO,CAACO,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BL,OAAO,CAACS,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS,CAFZ;AAMEP,QAAAA,OAAO,EAAE;AANX;;AAQF,SAAKP,YAAL;AACE,+BACKE,KADL;AAEES,QAAAA,QAAQ,EAAE,IAFZ;AAGEJ,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKN,aAAL;AACE,+BACKC,KADL;AAEEiB,QAAAA,KAAK,EAAEhB,MAAM,CAACG,OAFhB;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF;AACE,aAAOL,KAAP;AAxFJ;AA0FD,CA3FD","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        // id是contacts从contactContext里实时得到的，再传递给ContactItem，它再set到current里.\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n        loading: false\n      };\n    case DELETE_CONTACT:\n      if (state.filtered === null) {\n        return {\n          ...state,\n          contacts: state.contacts.filter(\n            // 返回满足条件的对象\n            contact => contact.id !== action.payload\n          ),\n          loading: false\n        };\n      } else {\n        return {\n          ...state,\n          filtered: state.filtered.filter(\n            contact => contact.id !== action.payload\n          ),\n          contacts: state.contacts.filter(\n            contact => contact.id !== action.payload\n          ),\n          loading: false\n        };\n      }\n    // return {\n    //   ...state,\n    //   contacts: state.contacts.filter(\n    //     // 返回满足条件的对象\n    //     contact => contact.id !== action.payload\n    //   ),\n    //   filtered: state.filtered.filter(\n    //     contact => contact.id !== action.payload\n    //   )\n    // };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n        loading: false\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n        loading: false\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi'); //gloabl, insensitive\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n        loading: false\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n        loading: false\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}