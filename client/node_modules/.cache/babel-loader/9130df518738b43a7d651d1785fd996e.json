{"ast":null,"code":"import _objectSpread from \"/Users/chentianming/Desktop/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case ADD_CONTACT:\n      return {\n        // ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n\n    case UPDATE_CONTACT:\n      return _objectSpread({}, state, {\n        // id是contacts从contactContext里实时得到的，再传递给ContactItem，它再set到current里.\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact)\n      });\n\n    case DELETE_CONTACT:\n      if (state.filtered === null) {\n        console.log('null');\n        return _objectSpread({}, state, {\n          contacts: state.contacts.filter( // 返回满足条件的对象\n          contact => contact.id !== action.payload)\n        });\n      } else {\n        return _objectSpread({}, state, {\n          filtered: state.filtered.filter(contact => contact.id !== action.payload),\n          contacts: state.contacts.filter(contact => contact.id !== action.payload)\n        });\n      }\n\n    // return {\n    //   ...state,\n    //   contacts: state.contacts.filter(\n    //     // 返回满足条件的对象\n    //     contact => contact.id !== action.payload\n    //   ),\n    //   filtered: state.filtered.filter(\n    //     contact => contact.id !== action.payload\n    //   )\n    // };\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case FILTER_CONTACTS:\n      return _objectSpread({}, state, {\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(\"\".concat(action.payload), 'gi'); //gloabl, insensitive\n\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      });\n\n    case CLEAR_FILTER:\n      return _objectSpread({}, state, {\n        filtered: null\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/chentianming/Desktop/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","state","action","type","contacts","payload","map","contact","id","filtered","console","log","filter","current","regex","RegExp","name","match","email"],"mappings":";AAAA,SACEA,WADF,EAEEC,cAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,cALF,EAMEC,eANF,EAOEC,YAPF,QAQO,UARP;AAUA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,WAAL;AACE,aAAO;AACL;AACAU,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B;AAFL,OAAP;;AAIF,SAAKP,cAAL;AACE,+BACKG,KADL;AAEE;AACAG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeE,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAAP,CAAeG,EAA9B,GAAmCN,MAAM,CAACG,OAA1C,GAAoDE,OAD5C;AAHZ;;AAOF,SAAKZ,cAAL;AACE,UAAIM,KAAK,CAACQ,QAAN,KAAmB,IAAvB,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,iCACKV,KADL;AAEEG,UAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeQ,MAAf,EACR;AACAL,UAAAA,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OAFzB;AAFZ;AAOD,OATD,MASO;AACL,iCACKJ,KADL;AAEEQ,UAAAA,QAAQ,EAAER,KAAK,CAACQ,QAAN,CAAeG,MAAf,CACRL,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OADzB,CAFZ;AAKED,UAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeQ,MAAf,CACRL,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACG,OADzB;AALZ;AASD;;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKT,WAAL;AACE,+BACKK,KADL;AAEEY,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAFlB;;AAIF,SAAKR,aAAL;AACE,+BACKI,KADL;AAEEY,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKd,eAAL;AACE,+BACKE,KADL;AAEEQ,QAAAA,QAAQ,EAAER,KAAK,CAACG,QAAN,CAAeQ,MAAf,CAAsBL,OAAO,IAAI;AACzC,gBAAMO,KAAK,GAAG,IAAIC,MAAJ,WAAcb,MAAM,CAACG,OAArB,GAAgC,IAAhC,CAAd,CADyC,CACY;;AACrD,iBAAOE,OAAO,CAACS,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BP,OAAO,CAACW,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFZ;;AAOF,SAAKd,YAAL;AACE,+BACKC,KADL;AAEEQ,QAAAA,QAAQ,EAAE;AAFZ;;AAIF;AACE,aAAOR,KAAP;AArEJ;AAuED,CAxED","sourcesContent":["import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case ADD_CONTACT:\n      return {\n        // ...state,\n        contacts: [...state.contacts, action.payload]\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        // id是contacts从contactContext里实时得到的，再传递给ContactItem，它再set到current里.\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id ? action.payload : contact\n        )\n      };\n    case DELETE_CONTACT:\n      if (state.filtered === null) {\n        console.log('null');\n        return {\n          ...state,\n          contacts: state.contacts.filter(\n            // 返回满足条件的对象\n            contact => contact.id !== action.payload\n          )\n        };\n      } else {\n        return {\n          ...state,\n          filtered: state.filtered.filter(\n            contact => contact.id !== action.payload\n          ),\n          contacts: state.contacts.filter(\n            contact => contact.id !== action.payload\n          )\n        };\n      }\n    // return {\n    //   ...state,\n    //   contacts: state.contacts.filter(\n    //     // 返回满足条件的对象\n    //     contact => contact.id !== action.payload\n    //   ),\n    //   filtered: state.filtered.filter(\n    //     contact => contact.id !== action.payload\n    //   )\n    // };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi'); //gloabl, insensitive\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}